package friday;

import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;

public class Producer extends Thread {
	private static AtomicInteger mElementsToBeProduced;
	private static Memory<Integer> mMemory;

	public Producer(Memory<Integer> memory, int elementsToBeProduced) {
		mMemory = memory;
		mElementsToBeProduced = new AtomicInteger(elementsToBeProduced);
	}

	public synchronized void produce() throws InterruptedException {
		Random rand = new Random();
		while (mElementsToBeProduced.addAndGet(0) > 0) {
			mMemory.put(rand.nextInt(10_000));
			System.out.println(mMemory.get(mMemory.getSize()));
			mElementsToBeProduced.decrementAndGet();
		}
		notifyAll();
	}

	public void run() {
		try {
			produce();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
