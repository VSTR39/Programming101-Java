package wednesday;

import java.util.concurrent.atomic.AtomicInteger;

public class Producer {
	private AtomicInteger mNumberOfElements;
	private Stack<Integer> mStack;
	private static AtomicInteger mCounter = new AtomicInteger(0);
	
	public Producer(Stack<Integer> stack){
		mStack = stack;
		mNumberOfElements = new AtomicInteger(mStack.getMaxStackSize()/Runtime.getRuntime().availableProcessors());
		mCounter = new AtomicInteger(0);
	}
	
	public void setNumberOfElements(int numberOfElements){
		mNumberOfElements.getAndSet(numberOfElements);
	}
	
	public int getNumberOfElements(){
		return mNumberOfElements.addAndGet(0);
	}
	
	public void setCounter(int counter){
		mCounter.getAndSet(counter);
	}
	
	public int getCounter(){
		return mCounter.addAndGet(0);
	}
	

	public void run() {
		while(getCounter() < getNumberOfElements()){
			
			mStack.setTopOfStack((mStack.getTopOfStack() + 1));
			mCounter.getAndSet(mCounter.incrementAndGet());
		}
	}
}
