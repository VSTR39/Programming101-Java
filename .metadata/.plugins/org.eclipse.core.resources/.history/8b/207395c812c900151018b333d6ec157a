package monday;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class SimpleBlockingQueue<T> {
	private AtomicInteger mTopOfQueue;
	private AtomicInteger mBottomOfQueue;
	private static int mQueueMaxSize = 10;
	protected ArrayList<T> mQueue;
	private boolean mFlagIsSet = false;

	public int getTopOfQueue() {
		return mTopOfQueue.get();
	}

	public void setTopOfQueue(int topOfQueue) {
		this.mTopOfQueue = new AtomicInteger(topOfQueue);
	}

	public int getBottomOfQueue() {
		return mBottomOfQueue.get();
	}

	public void setBottomOfQueue(int bottomOfQueue) {
		this.mBottomOfQueue = new AtomicInteger(bottomOfQueue);
	}

	public ArrayList<T> getQueue() {
		return mQueue;
	}

	public int getQueueMaxSize() {
		return mQueueMaxSize;
	}

	public SimpleBlockingQueue() {
		mQueue = new ArrayList<T>();
		setTopOfQueue(0);
		setBottomOfQueue(0);
	}

	public boolean isEmpty() {
		boolean result = true;
		if (mTopOfQueue == mBottomOfQueue) {
			result = true;
		} else {
			result = false;
		}
		return result;
	}

	public boolean put(T e) throws InterruptedException {
		synchronized (this) {
			boolean result = false;
			if (this.getQueueMaxSize() > this.getTopOfQueue() && this.getBottomOfQueue()==0) {
				mQueue.add(e);
				setTopOfQueue(mTopOfQueue.incrementAndGet());
				result = true;
			} else {
				setTopOfQueue(0);
				result = false;
				setFlagTrue();
				while (mFlagIsSet) {
					notify();
					wait();
				}
			}
			return result;
		}
	}

	public void setFlagFalse() {
		mFlagIsSet = false;
	}

	public void setFlagTrue() {
		mFlagIsSet = true;
	}

	public synchronized T poll() throws InterruptedException {
		T result = null;
		Lock lock = new ReentrantLock();
		if (this.getBottomOfQueue() >= this.getQueueMaxSize() || (mQueue.size() <= getBottomOfQueue())) {
			setBottomOfQueue(0);
			result = null;
			setFlagFalse();
			// notify();
			wait();

		} else {
			lock.lock();
			result = mQueue.remove(getBottomOfQueue());
			setBottomOfQueue(mBottomOfQueue.incrementAndGet());
			lock.unlock();
		}
		return result;
	}

}
