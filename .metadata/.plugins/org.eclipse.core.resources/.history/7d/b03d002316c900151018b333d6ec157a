package monday;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicInteger;

public class SimpleBlockingQueue<T> {
	private AtomicInteger mTopOfQueue;
	private AtomicInteger mBottomOfQueue;
	private static int mQueueMaxSize = 10;
	protected ArrayList<T> mQueue;
	private boolean mFlagIsSet = false;

	public int getTopOfQueue() {
		return mTopOfQueue.get();
	}

	public void setTopOfQueue(int topOfQueue) {
		this.mTopOfQueue = new AtomicInteger(topOfQueue);
	}

	public int getBottomOfQueue() {
		return mBottomOfQueue.get();
	}

	public void setBottomOfQueue(int bottomOfQueue) {
		this.mBottomOfQueue = new AtomicInteger(bottomOfQueue);
	}

	public ArrayList<T> getQueue() {
		return mQueue;
	}

	public int getQueueMaxSize() {
		return mQueueMaxSize;
	}

	public SimpleBlockingQueue() {
		mQueue = new ArrayList<T>();
		setTopOfQueue(0);
		setBottomOfQueue(0);
	}

	public boolean isEmpty() {
		boolean result = true;
		if (mTopOfQueue == mBottomOfQueue) {
			result = true;
		} else {
			result = false;
		}
		return result;
	}

	public synchronized boolean put(T e) throws InterruptedException {
		while (this.getTopOfQueue() - this.getQueueMaxSize() > -this.getQueueMaxSize()) {
			notify();
			wait();
			return false;
		}
		mQueue.add(e);

		return return true;;
	}

	public void setFlagFalse() {
		mFlagIsSet = false;
	}

	public void setFlagTrue() {
		mFlagIsSet = true;
	}

	public synchronized T poll() throws InterruptedException {
		T result = null;

		return result;
	}

}
