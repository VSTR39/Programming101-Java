package wednesday;

import java.util.LinkedList;
import java.util.concurrent.atomic.AtomicInteger;

public class Stack<T> {
	private AtomicInteger mTopOfStack;
	private LinkedList<T> mStack;
	private static int mMaxStackSize;
	private static int mElements;

	public int getElements() {
		return mElements;
	}

	public static void setElements(int mElements) {
		Stack.mElements = mElements;
	}

	public void setTopOfStack(int topOfStack) {
		mTopOfStack.getAndSet(topOfStack);
	}

	public int getTopOfStack() {
		return mTopOfStack.addAndGet(0);
	}

	public int getMaxStackSize() {
		return mMaxStackSize;
	}

	public static void setMaxStackSize(int mMaxStackSize) {
		Stack.mMaxStackSize = mMaxStackSize;
	}

	public Stack() {
		mStack = new LinkedList();
		mTopOfStack = new AtomicInteger(0);
	}

	public Stack(int size, int elements) {
		mStack = new LinkedList();
		mTopOfStack = new AtomicInteger(0);
		mMaxStackSize = size;
		mElements = size;
	}

	public boolean put(T e) {
		boolean result;
		if (mStack.size() == mMaxStackSize) {
			result = false;
		} else {
			mStack.add(e);
			this.setTopOfStack(mTopOfStack.getAndAdd(1));
			result = true;
		}
		return result;
	}

	public boolean isEmpty() {
		return (0 == mTopOfStack.addAndGet(0));
	}

	public  T get() {
		T result = null;
		if (this.isEmpty()) {
			result = null;
		} else {
			result = mStack.remove(this.getTopOfStack() - 1);
			this.setTopOfStack(mTopOfStack.decrementAndGet());
		}
		return result;

	}
}
