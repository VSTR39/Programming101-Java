package wednesday;

import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;

public class Consumer extends Thread {
	private AtomicInteger mNumberOfElements;
	private Stack<Integer> mStack;
	private static AtomicInteger mCounter = new AtomicInteger(0);

	public Consumer(Stack<Integer> stack) {
		mStack = stack;
		mNumberOfElements = new AtomicInteger(mStack.getMaxStackSize() / Runtime.getRuntime().availableProcessors());
		mCounter = new AtomicInteger(0);
	}

	public void setNumberOfElements(int numberOfElements) {
		mNumberOfElements.getAndSet(numberOfElements);
	}

	public int getNumberOfElements() {
		return mNumberOfElements.addAndGet(0);
	}

	public void setCounter(int counter) {
		mCounter.getAndSet(counter);
	}

	public int getCounter() {
		return mCounter.addAndGet(0);
	}

	public void run() {
		Random rand = new Random();
		while (mStack.getTopOfStack() > 0) {
			Integer x = mStack.get();
			System.out.println("Consumer: " + Thread.currentThread().getName() + "just extracted element" + ":" + x
					+ " from position " + mStack.getTopOfStack() + " in the queue.");
			mStack.setTopOfStack((mStack.getTopOfStack() - 1));
			
		}
	}

}
